/*****************************************************************************
   STM    support routines for ScreamTracker 1.0 music files
  --------------------------------------------------------------------------
   (c) copyright 1996 by A.Baresel
    Created on 28.7.1996
*****************************************************************************/

#if !defined(__STM_H__)
#define __STM_H__

#ifdef __GNUC__
#define pack __attribute__ ((packed))
#else
#define pack
#endif

#include "module.h"
#include <stdio.h>
#include "../global.h"

/* ++++++++++++++++ Class def. +++++++++++++++++++++++++++++++++++++++++++ */
class STM_c: public Module_c {
public:
  STM_c(char *name):Module_c(name) { load_module(); }
  STM_c(FILE *f):Module_c(f)       { load_module(); }
  STM_c(char *name,long offset):Module_c(name,offset) { load_module(); }
  STM_c(FILE *f,long offset):Module_c(f,offset)       { load_module(); }
  ~STM_c(void) { delete_module(); }

protected: 
/**************************************************************************/
/* ++++++++++++++++++ STM specific types ++++++++++++++++++++++++++++++++ */

struct channel_t    {  int  period;
		       char finetune;  // last finetune setup
		       BYTE instr;
		       short volume;

		       // effect & parameter
		       WORD effect;
		       WORD useeffect;    /* converted effect number */
		       BYTE parameter;    /* last parameter != 0 */
		       BYTE continueEff;

		       // vibrato and tremolo
		       WORD VibtabPos;   // position in table 0..63
		       WORD TrmtabPos;   // position in table 0..63
		       BYTE VibwavNo;    // waveform (sinus/ramp/square)
		       BYTE TrmwavNo;    // waveform
		       BYTE VibDepth;
		       BYTE VibSpeed;     // last vibrato parameters

		       // portamentos
		       BYTE PortPara;      // last portamento parameters
		       BYTE Glisscontrol;  // Slide with glisscontrol
		       int Slideto;      // period value we slide to

		       // arpeggio stuff
		       BYTE ArpeggioPos;  // 0..2
		       int periods[3];

		       // for timing of some effects (e.g. retrigg,notecut)
		       BYTE ctick;
		       WORD numticks;
		       BYTE sInst;
		       WORD sPeriod;

		       // for pattern loops
		       BYTE inside;       // inside a loop ?
		       BYTE loopto;       // row to loop to
		       BYTE loops;        // number of loops

		       // for setofs effect
		       WORD startoffset;
		     } chn[MAXCHANNELS];

// no allignment in next structur: (pack)

struct instrument_t      {  char name[12] pack;
                            BYTE id pack; //==0
                            BYTE disk pack; // ??
                            WORD reserved pack;
			    WORD smplen pack;
                            WORD loopstart pack;
                            WORD loopend pack;
			    BYTE volume pack;
                            BYTE reserved2 pack;
                            WORD C3freq pack;
                            DWORD reserved3 pack;
                            WORD paralen;
			  } Instrument[32];

struct header_t	 { char songname[20] pack;
                   char tracker[8] pack;
                   BYTE eot pack; // ==0x1a
                   BYTE filetype pack;
                   BYTE version_maj pack;
                   BYTE version_min pack;
                   BYTE default_tempo pack;
                   BYTE no_Pattern pack;
                   BYTE global_volume pack;
                   BYTE reserved[13] pack;
		 } STM_header;

	BYTE emptypatn[64];
	BYTE order[64];
	BYTE chnpan[32];
	BYTE * Pattern_p[256]; 

	short no_Pattern;
	short no_Channels;
	BYTE  no_Orders;
	short no_Instr;

	//---- extra variables for global effects for all channels
	//|  they are set in the channels, but handling follows after reading
	//|  all channels !!
	//-------------------
	BYTE patternbreak;
	BYTE pbreakto;
	BYTE patternloop;
	BYTE ploopto;
	BYTE positionjump;
	BYTE pjumpto;

	//---- internal playdata
	short c_order;
	short c_row;
	short c_tick;
	BYTE *c_position;     
	short c_speed;
	short c_tempo;
	BYTE  restart_pos;

	BYTE patterndelay;      // counter for pattern delay

	short startmodule(void);
	short nextnotes(playinfo_t* playinfo_p);

	void   delete_module(void);    // delete MOD-module from memory
	void   load_module(void);      // load MOD-module
	short  load_pattern(WORD pos,WORD no);
	DWORD  readSMP8_BLK(BYTE * destination,DWORD size,BYTE bits);
	DWORD  readSMP16_BLK(WORD * destination,DWORD size,BYTE bits);

	void   effect_handling(struct playinfo_t * playinfo);
	void   doeffects_patterndly(struct playinfo_t * playinfo);
	void   read_new_notes(struct playinfo_t * playinfo);
	void   setup_channel(struct playinfo_t *playinfo,unsigned char chnnr,
			      int period,short instr,short effno, short effpar);

    friend void module_wprint(void);   // playing infos to curses screen
    friend void mixdevice_wprint(void);
    friend void awe32_wprint(void);
};

#endif
