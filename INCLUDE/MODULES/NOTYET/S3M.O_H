/****************************************************************************
   S3M reading functions
  --------------------------------------------------------------------------
  (c) copyright 1995,96 by A.Baresel

  created: 11.11.1995 (it wasn't a joke ...)
****************************************************************************/

#if !defined(__S3M_H__)
#define __S3M_H__

#include "module.h"
#include "global.h"
#include <stdio.h>

// display routine for simple termio ...
extern void s3m_printinfo(void);

/* ++++++++++++++++ Class def. +++++++++++++++++++++++++++++++++++++++++++ */
class S3M_c: public Module_c {
public:
  S3M_c(char *name):Module_c(name) { load_module(); }
  S3M_c(FILE *f):Module_c(f) { load_module(); } 
  S3M_c(char *name,long offset):Module_c(name,offset) { load_module(); }
  S3M_c(FILE *f,long offset):Module_c(f,offset)       { load_module(); }
  virtual void load_module(void); // overwrite empty routine of superclass
  ~S3M_c(void) { delete_module(); }

protected: 
/**************************************************************************/
/* ++++++++++++++++++ S3M specific types ++++++++++++++++++++++++++++++++ */

struct channel_t    { BYTE note;
			  BYTE instr;
			  BYTE volume;

			  WORD period;
			  WORD lownote_border;   // C-0 or C-2
			  WORD uppernote_border; // C-7 or C-5

			  // effect parameter
			  WORD command;
			  BYTE parameter;

			  // vibrato and tremolo
			  WORD VibtabPos;   // position in table 0..63
			  WORD TrmtabPos;   // position in table 0..63
			  BYTE VibwavNo;    // waveform (sinus/ramp/square)
			  BYTE TrmwavNo;    // waveform
			  BYTE VibDepth;
			  BYTE VibSpeed;     // last vibrato parameters

			  // portamentos
			  BYTE PortPara;
			  BYTE Glisscontrol;
			  WORD Slideto;

			  // arpeggio stuff
			  BYTE ArpeggioPos;
			  WORD periods[3];

			  // for timing of some effects
			  BYTE ctick;
			  BYTE store;
			  BYTE sInst;
			  BYTE sNote;
			  WORD sPeriod;

			  // for setofs effect
			  WORD startoffset;
			};

// struc is packed !!!
struct instrument_t     {   BYTE typ;
			    char dosname[12];
			    BYTE memsegHi;
			    WORD memseg;  // parapointer in file
			    DWORD slength;
			    DWORD loopbeg;
			    DWORD loopend;
			    BYTE defaultvol;
			    BYTE notused2;
			    BYTE packinfo;
			    BYTE flags;
			    DWORD c2speed;
			    DWORD notused3;
			    WORD GUSadress;
			    WORD SB_flags;
			    DWORD SB_last;
			    char Instrumentname[28];
			    char SCRS_id[4]; 
			  };

struct S3M_header_t     { char songname[28];
			  BYTE endchar;
			  BYTE Filetype;
			  WORD reserved1;
			  WORD ordnum;
			  WORD insnum;
			  WORD patnum;
			  WORD flags;
			  WORD CreatedwithTrackerVersion;
			  WORD FileFormatInformation;
			  char SCRM_id[4];
			  BYTE gvolume;
			  BYTE initialspeed;
			  BYTE initialtempo;
			  BYTE mvolume;
			  BYTE ultraclickremoval;
			  BYTE pantablepresent; // = 252 if table exists
			  BYTE reserved2[8];
			  WORD specialdata; // file para pointer to specialdata
			  BYTE channelset[32];
			  BYTE noChannels;
			} S3M_header PACKSTRUC;

	BYTE emptypatn[64];
	BYTE order[256];
	BYTE chnpan[32];
	BYTE * Pattern_p[256]; 
	struct instrument_t (*Instrument_p)[99] PACKSTRUC;

	//---- extra variables for global effects for all channels
	//|  they are set in the channels, but handling follows after reading
	//|  all channels !!
	//-------------------
	BYTE patternbreak;
	BYTE pbreakto;
	BYTE patternloop;
	BYTE ploopto;
	BYTE positionjump;
	BYTE pjumpto;
	BYTE newgvol;

	//---- internal playdata
	short c_order;
	short c_row;
	short c_tick;
	BYTE *c_position;     
	short c_speed;
	short c_tempo;
	short no_Pattern;
	short no_Channels;
	short no_Orders;

	short startmodule(void);
	short nextnotes(playinfo_t* playinfo_p);

	//---- for pattern loops
	BYTE inside;          // inside a loop ?
	BYTE loopto;          // row to loop to
	BYTE loops;           // number of loops
	struct channel_t chn[MAXCHANNELS];
	BYTE  patterndelay;      // counter for pattern delay

	WORD   getnoChannels(void);
	void   delete_module(void);    // delete S3M-module from memory
	//void   load_module(void);      // load S3M-module
	short  load_pattern(WORD pos,WORD no);
	void   load_instrument(WORD pos,WORD no);
	DWORD  readSMP8_BLK(BYTE * destination,DWORD size,BYTE bits);
	DWORD  readSMP16_BLK(WORD * destination,DWORD size,BYTE bits);

	void   effect_handling(struct playinfo_t * playinfo);
	void   doeffects_patterndly(struct playinfo_t * playinfo);
	void   read_new_notes(struct playinfo_t * playinfo);
	void   jumpto(char jp2);
	void   setup_channel(struct playinfo_t *playinfo,BYTE chnnr,
			      BYTE note,BYTE instr,BYTE vol,BYTE effno, BYTE effpar);
   friend void module_printinfo(void);
   friend void module_wprint(void);   // playing infos to curses screen
   friend void mixdevice_wprint(void);
   friend void awe32_wprint(void);

};

#endif

/*
  TODO: - correct Arpeggio 
        - implement multi retrigg (Qxx)
	- implement finetune (E8x)
*/