/// ----> Code generated by GCC-compiler
// --> quite good for a compiler, but we can do it better !
// btw) GNUC does unroll loops only 4 times ...
// 32 times and jumpin via lookup would be better 
// (average loops per call: about 3000)
///
///

 Currently I'm thinking about a fully new optimization for 
 non-interpolation modes: 

----- for slow mixing (step < 0.5) we can remove 2 memory accesses
----- costs: a branch - is this worth ?
----- instead of the "adc" a "jc"


// 8bit mono mixing: (8 instructions) ---------------------------------------
nearlly fully register use !
// edx --> offset + fraction
// esi --> sample ptr, volume table ptr
// edi --> step
---> My optimization i386:
// creat a special selector (es) to volumetable ---> offset=0
// that would remove 2 instructions -->(*)
// in this case esi would allways point to sample start

// eax --> offset w/out frac, sample value, sample value/vol,
// ecx --> dest ptr
// bx --> loop counter !

     movl %edx,%eax
     shrl $16,%eax
(*)  movl 16(%ebp),%esi
     movzbl (%eax,%esi),%eax
(*)  movl -4(%ebp),%esi
     movw (%esi,%eax,4),%ax
     addw %ax,(%ecx)
     addl %edi,%edx

// 8bit mono interpolated: (16 instructions) --------------------------------
// --> no comment, I'll think about it

        movl %ebx,%eax                  ; ebx --> offset with fraction
	shrl $16,%eax                   ; eax --> offset w/out fraction
	movl 16(%ebp),%edi              ; edi --> sample ptr
	movzbw (%eax,%edi),%cx          ; cx  --> mem(sample ptr)
	movzbl 1(%edi,%eax),%eax        ; eax --> mem(sample ptr+1)
	movswl %cx,%edx                 ; edx --> mem(sample ptr)
	subl %edx,%eax                  ; diff between those values
	movzwl %bx,%edx                 ; edx --> fraction
	imull %edx,%eax                 ;
	sarl $16,%eax                   ; frac*diff>>16
	addw %ax,%cx                    ;
	movswl %cx,%eax                 ; eax --> interpolated sample value
	movl -4(%ebp),%edi              ;
	movw (%edi,%eax,4),%ax          ; volumetable[vol][eax]
	addw %ax,(%esi)                 ; add to (*dest)
	addl 24(%ebp),%ebx              ; ebx--> next position in sample

// stereo 8bit mixing:

        movl %edx,%eax
	shrl $16,%eax
	movl 16(%ebp),%ebx
	movzbl (%eax,%ebx),%eax
	movw (%ecx,%eax,4),%bx
	addw %bx,(%esi)
	movl -8(%ebp),%ebx
	movw (%ebx,%eax,4),%ax
	addw %ax,2(%esi)
	addl 28(%ebp),%edx

// stereo 8bit interpolation not yet ....
